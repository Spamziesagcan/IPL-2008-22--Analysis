# -*- coding: utf-8 -*-
"""IPL 2008-2022.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RfeiIw1JBM2bTtbVjneraXN7rvs5wbqB

# ***DATA COLLECTION AND IMPORTING LIBRARIES***
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
df = pd.read_csv('IPL Dataset 2008-2022.csv')

"""# ***DATA*** ***EXPLORATION***"""

df.shape

df.head()

df.tail()

df.info()

df.describe()

df.isnull().sum()

df.isnull().sum()/df.shape[0]*100

df.duplicated().sum()

for i in df.columns:
  print(i, df[i].nunique)

"""# ***DATA CLEANING***"""

def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
print("Outliers removed!")

df.info()

summary_stats = df.describe().T
summary_stats

summary_stats = df.describe().T
summary_stats['IQR'] = summary_stats['75%'] - summary_stats['25%']
summary_stats

"""# ***FEATURE ENGINEERING x DATA VISUALIZATION***"""

if "BattingTeam" in df.columns and "total_run" in df.columns:
    total_runs_per_team = df.groupby("BattingTeam")["total_run"].sum().reset_index()
    total_runs_per_team.columns = ["Team", "Total_Runs"]
    if "Total_Runs" in df.columns:
        df.drop(columns=["Total_Runs"], inplace=True)
    df = df.merge(total_runs_per_team, left_on="BattingTeam", right_on="Team", how="left")
    df.drop(columns=["Team"], inplace=True)

    plt.figure(figsize=(12, 10))
    sns.barplot(x="Total_Runs", y="Team", data=total_runs_per_team, palette="viridis")
    plt.title("Total Runs Scored by Each IPL Team (2008-2022)", fontsize=14)
    plt.xlabel("Total Runs", fontsize=12)
    plt.ylabel("Teams", fontsize=12)
    plt.show()
else:
    print("Please check the correct column names for teams and runs in your dataset.")

if "batter" in df.columns and "batsman_run" in df.columns:
    total_runs_per_player = df.groupby("batter")["batsman_run"].sum().reset_index()
    top_5_players = total_runs_per_player.nlargest(5, "batsman_run")

    plt.figure(figsize=(8, 8))
    colors = sns.color_palette("Paired", n_colors=5)
    plt.pie(top_5_players["batsman_run"], labels=top_5_players["batter"],
            autopct="%1.1f%%", startangle=140, colors=colors)
    plt.title("Top 5 Run-Scoring Players in IPL (2008-2022)")
    plt.show()
else:
    print("Please check the correct column names for batsmen and runs in your dataset.")

numerical_df = df.select_dtypes(include=["number"])
if numerical_df.shape[1] > 1:
    correlation_matrix = numerical_df.corr()

    plt.figure(figsize=(12, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", linewidths=0.5, fmt=".2f")

    plt.title("Overall Correlation Heatmap of IPL Stats", fontsize=14)
    plt.show()
else:
    print("Not enough numerical columns for correlation analysis.")

if {"batter", "batsman_run", "ballnumber"}.issubset(df.columns):
    batsman_stats = df.groupby("batter").agg({"batsman_run": "sum", "ballnumber": "count"})
    batsman_stats["strike_rate"] = (batsman_stats["batsman_run"] / batsman_stats["ballnumber"]) * 100
    batsman_stats.reset_index(inplace=True)

    fig = px.scatter_3d(batsman_stats, x="batsman_run", y="ballnumber", z="strike_rate",
                         title="Batsmen Performance: Runs vs Balls Faced vs Strike Rate",
                         color="strike_rate", color_continuous_scale="Viridis")
    fig.update_traces(marker=dict(size=5))
    fig.show()

else:
    print("Please check the correct column names in your dataset.")

if {"ID", "BattingTeam", "total_run"}.issubset(df.columns):
    match_runs = df.groupby(["ID", "BattingTeam"])["total_run"].sum().reset_index()
    match_winners = match_runs.loc[match_runs.groupby("ID")["total_run"].idxmax()]
    total_wins = match_winners["BattingTeam"].value_counts().reset_index()
    total_wins.columns = ["Team", "Total Wins"]
    total_wins["Season"] = range(2008, 2008 + len(total_wins))

    fig = go.Figure()
    fig.add_trace(go.Scatter3d(
        x=total_wins["Team"],
        y=total_wins["Season"],
        z=total_wins["Total Wins"],
        mode="markers",
        marker=dict(
            size=total_wins["Total Wins"] / 5,
            color=total_wins["Total Wins"],
            colorscale="Plasma",
            opacity=0.8
        ),
        text=total_wins["Total Wins"],
        hoverinfo="text"
    ))
    fig.update_layout(
        title="IPL Teams' Wins Across Seasons (2008-2022)",
        scene=dict(
            xaxis_title="Teams",
            yaxis_title="Seasons",
            zaxis_title="Total Wins"
        )
    )
    fig.show()

else:
    print("Please check the correct column names in your dataset.")

if {"ID", "overs", "total_run"}.issubset(df.columns):
    over_runs = df.groupby(["ID", "overs"])["total_run"].sum().reset_index()
    pivot_table = over_runs.pivot(index="ID", columns="overs", values="total_run").fillna(0)
    Z = pivot_table.values
    X = np.arange(Z.shape[1])
    Y = np.arange(Z.shape[0])

    fig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y, colorscale="inferno")])
    fig.update_layout(title="Runs Scored per Over (2008-2022)", scene=dict(
        xaxis_title="Overs",
        yaxis_title="Matches",
        zaxis_title="Total Runs"
    ))
    fig.show()

else:
    print("Please check the correct column names in your dataset.")

"""# ***ADVANCED ANALYTICS: FEATURE ENGINEERING***"""

clutch_overs = df[df["overs"] >= 16]
clutch_batting = clutch_overs.groupby("batter").agg({
    "batsman_run": ["sum", "count"]
}).reset_index()

clutch_batting.columns = ["batter", "clutch_runs", "balls_faced"]
clutch_batting["strike_rate"] = (clutch_batting["clutch_runs"] / clutch_batting["balls_faced"]) * 100

clutch_batting["Clutch_Score"] = (
    0.7 * (clutch_batting["clutch_runs"] / clutch_batting["clutch_runs"].max()) +
    0.3 * (clutch_batting["strike_rate"] / clutch_batting["strike_rate"].max())
)
clutch_batting = clutch_batting.sort_values(by="Clutch_Score", ascending=False).reset_index(drop=True)
clutch_batting.head(10)

required_cols = {"overs", "bowler", "total_run", "isWicketDelivery"}
if not required_cols.issubset(df.columns):
    print("Missing required columns.")
else:
    clutch_overs = df[df["overs"] >= 16]
    clutch_bowling = clutch_overs.groupby("bowler").agg({
        "total_run": "sum",
        "isWicketDelivery": "sum",
        "ballnumber": "count"
    }).reset_index()

    clutch_bowling.columns = ["bowler", "runs_conceded", "wickets", "balls_bowled"]
    clutch_bowling["economy"] = (clutch_bowling["runs_conceded"] / clutch_bowling["balls_bowled"]) * 6
    clutch_bowling["Norm_Wickets"] = clutch_bowling["wickets"] / clutch_bowling["wickets"].max()
    clutch_bowling["Norm_Economy"] = 1 - (clutch_bowling["economy"] / clutch_bowling["economy"].max())  # Inverted

    clutch_bowling["Clutch_Score"] = (
        0.6 * clutch_bowling["Norm_Wickets"] +
        0.4 * clutch_bowling["Norm_Economy"]
    )
    clutch_bowling = clutch_bowling.sort_values(by="Clutch_Score", ascending=False).reset_index(drop=True)
    print(clutch_bowling[["bowler", "wickets", "economy", "Clutch_Score"]].head(10))